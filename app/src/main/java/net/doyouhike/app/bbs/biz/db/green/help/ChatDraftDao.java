package net.doyouhike.app.bbs.biz.db.green.help;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.doyouhike.app.bbs.biz.db.green.entities.ChatDraft;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_DRAFT".
*/
public class ChatDraftDao extends AbstractDao<ChatDraft, Long> {

    public static final String TABLENAME = "CHAT_DRAFT";

    /**
     * Properties of entity ChatDraft.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Uu_ids = new Property(1, String.class, "uu_ids", false, "UU_IDS");
        public final static Property Msg = new Property(2, String.class, "msg", false, "MSG");
        public final static Property Retry_count = new Property(3, int.class, "retry_count", false, "RETRY_COUNT");
        public final static Property Send_time = new Property(4, long.class, "send_time", false, "SEND_TIME");
        public final static Property Sender_id = new Property(5, String.class, "sender_id", false, "SENDER_ID");
    }


    public ChatDraftDao(DaoConfig config) {
        super(config);
    }
    
    public ChatDraftDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_DRAFT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"UU_IDS\" TEXT," + // 1: uu_ids
                "\"MSG\" TEXT," + // 2: msg
                "\"RETRY_COUNT\" INTEGER NOT NULL ," + // 3: retry_count
                "\"SEND_TIME\" INTEGER NOT NULL ," + // 4: send_time
                "\"SENDER_ID\" TEXT);"); // 5: sender_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_DRAFT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatDraft entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String uu_ids = entity.getUu_ids();
        if (uu_ids != null) {
            stmt.bindString(2, uu_ids);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(3, msg);
        }
        stmt.bindLong(4, entity.getRetry_count());
        stmt.bindLong(5, entity.getSend_time());
 
        String sender_id = entity.getSender_id();
        if (sender_id != null) {
            stmt.bindString(6, sender_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatDraft entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String uu_ids = entity.getUu_ids();
        if (uu_ids != null) {
            stmt.bindString(2, uu_ids);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(3, msg);
        }
        stmt.bindLong(4, entity.getRetry_count());
        stmt.bindLong(5, entity.getSend_time());
 
        String sender_id = entity.getSender_id();
        if (sender_id != null) {
            stmt.bindString(6, sender_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ChatDraft readEntity(Cursor cursor, int offset) {
        ChatDraft entity = new ChatDraft( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uu_ids
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // msg
            cursor.getInt(offset + 3), // retry_count
            cursor.getLong(offset + 4), // send_time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // sender_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatDraft entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUu_ids(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRetry_count(cursor.getInt(offset + 3));
        entity.setSend_time(cursor.getLong(offset + 4));
        entity.setSender_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatDraft entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatDraft entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatDraft entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
