package net.doyouhike.app.bbs.biz.db.green.help;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import net.doyouhike.app.bbs.biz.db.green.entities.ChatUserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_USER_INFO".
*/
public class ChatUserInfoDao extends AbstractDao<ChatUserInfo, String> {

    public static final String TABLENAME = "CHAT_USER_INFO";

    /**
     * Properties of entity ChatUserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property User_id = new Property(0, String.class, "user_id", true, "USER_ID");
        public final static Property Sex = new Property(1, String.class, "sex", false, "SEX");
        public final static Property Avatar = new Property(2, String.class, "avatar", false, "AVATAR");
        public final static Property Mobile = new Property(3, String.class, "mobile", false, "MOBILE");
        public final static Property City_name = new Property(4, String.class, "city_name", false, "CITY_NAME");
        public final static Property Im_id = new Property(5, String.class, "im_id", false, "IM_ID");
        public final static Property Internal_id = new Property(6, String.class, "internal_id", false, "INTERNAL_ID");
        public final static Property User_desc = new Property(7, String.class, "user_desc", false, "USER_DESC");
        public final static Property Nick_name = new Property(8, String.class, "nick_name", false, "NICK_NAME");
        public final static Property Im_enabled = new Property(9, boolean.class, "im_enabled", false, "IM_ENABLED");
        public final static Property LastMsgTime = new Property(10, long.class, "lastMsgTime", false, "LAST_MSG_TIME");
    }


    public ChatUserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ChatUserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_USER_INFO\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: user_id
                "\"SEX\" TEXT," + // 1: sex
                "\"AVATAR\" TEXT," + // 2: avatar
                "\"MOBILE\" TEXT," + // 3: mobile
                "\"CITY_NAME\" TEXT," + // 4: city_name
                "\"IM_ID\" TEXT," + // 5: im_id
                "\"INTERNAL_ID\" TEXT," + // 6: internal_id
                "\"USER_DESC\" TEXT," + // 7: user_desc
                "\"NICK_NAME\" TEXT," + // 8: nick_name
                "\"IM_ENABLED\" INTEGER NOT NULL ," + // 9: im_enabled
                "\"LAST_MSG_TIME\" INTEGER NOT NULL );"); // 10: lastMsgTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatUserInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUser_id());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(2, sex);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(5, city_name);
        }
 
        String im_id = entity.getIm_id();
        if (im_id != null) {
            stmt.bindString(6, im_id);
        }
 
        String internal_id = entity.getInternal_id();
        if (internal_id != null) {
            stmt.bindString(7, internal_id);
        }
 
        String user_desc = entity.getUser_desc();
        if (user_desc != null) {
            stmt.bindString(8, user_desc);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(9, nick_name);
        }
        stmt.bindLong(10, entity.getIm_enabled() ? 1L: 0L);
        stmt.bindLong(11, entity.getLastMsgTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatUserInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUser_id());
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(2, sex);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(5, city_name);
        }
 
        String im_id = entity.getIm_id();
        if (im_id != null) {
            stmt.bindString(6, im_id);
        }
 
        String internal_id = entity.getInternal_id();
        if (internal_id != null) {
            stmt.bindString(7, internal_id);
        }
 
        String user_desc = entity.getUser_desc();
        if (user_desc != null) {
            stmt.bindString(8, user_desc);
        }
 
        String nick_name = entity.getNick_name();
        if (nick_name != null) {
            stmt.bindString(9, nick_name);
        }
        stmt.bindLong(10, entity.getIm_enabled() ? 1L: 0L);
        stmt.bindLong(11, entity.getLastMsgTime());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public ChatUserInfo readEntity(Cursor cursor, int offset) {
        ChatUserInfo entity = new ChatUserInfo( //
            cursor.getString(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // city_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // im_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // internal_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_desc
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // nick_name
            cursor.getShort(offset + 9) != 0, // im_enabled
            cursor.getLong(offset + 10) // lastMsgTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatUserInfo entity, int offset) {
        entity.setUser_id(cursor.getString(offset + 0));
        entity.setSex(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCity_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIm_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInternal_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_desc(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNick_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIm_enabled(cursor.getShort(offset + 9) != 0);
        entity.setLastMsgTime(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChatUserInfo entity, long rowId) {
        return entity.getUser_id();
    }
    
    @Override
    public String getKey(ChatUserInfo entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatUserInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
